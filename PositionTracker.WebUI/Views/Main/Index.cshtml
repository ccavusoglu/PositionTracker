@{
    ViewData["Title"] = "Positions";
}

@section Scripts
{
    <script>
        if (typeof module === 'object') {
            window.module = module;
            module = undefined;
        }
    </script>

    <script src="~/lib/jquery/dist/jquery.js" integrity=""></script>
    <script src="js/signalr.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js" integrity=""></script>
    <script src="~/js/site.js" integrity=""></script>

    <script src="~/js/jquery-ui-1.11.3.js"></script>
    <script src="~/js/jquery.event.drag-2.3.0.js"></script>
    <script src="~/js/slick.core.js"></script>
    <script src="~/plugins/slick.cellrangedecorator.js"></script>
    <script src="~/plugins/slick.cellrangeselector.js"></script>
    <script src="~/plugins/slick.cellselectionmodel.js"></script>
    <script src="~/plugins/slick.rowselectionmodel.js"></script>
    <script src="~/js/slick.formatters.js"></script>
    <script src="~/js/slick.editors.js"></script>
    <script src="~/js/slick.grid.js"></script>
    <script src="~/js/slick.dataview.js"></script>

    <script>
        if (window.module)
            module = window.module;
    </script>

    <script type="text/javascript">

        $(document).on('keydown',
            function(e) {
                console.log(e);
            });

        $(document).ready(function() {
            subscribe('update', updateReceived);

            const links = document.querySelectorAll('link[rel="import"]');

            Array.prototype.forEach.call(links,
                function(link) {
                    let template = link.import.querySelector('.selector-template');
                    let clone = document.importNode(template.content, true);

                    document.querySelector('#mainContent').appendChild(clone);
                });

            $(".main-nav").children()[0].click();
        });

        function updateReceived(data) {
            if (data == null || data === '') {
                log(`updateReceived invalid LiveData: ${data}`);
                return;
            }

            console.log(data);
            const obj = data.data;

            if (data.type === "summary") refreshSummary(obj);
            else if (data.type === "position" && selectedTab === 'Position') refreshPositions(obj);
            else log(`undefined data: ${data.type}`);
        };

        function log(obj) {
            console.log(obj);
        }

        function getPage(item) {
            $(item).siblings().each(function() {
                $(this).find('span').removeClass('active');
            });

            $(item).find('span').addClass('active');

            hideAllPages();

            selectedTab = $(item).data('id');

            const section = `#section${selectedTab}`;

            $(section).addClass('is-shown');
            $(section).show();

            return false;
        }

        function hideAllPages() {
            $('.section').removeClass('is-shown');
            $('.section').hide();
        }

        function refreshSummary(data) {
            let summaryBalanceBody = $('#summaryBalanceBody');
            let summaryTotalBody = $('#summaryTotalBody');
            let summaryBtcTickerBody = $('#summaryBtcTickerBody');

            summaryBalanceBody.empty();
            summaryTotalBody.empty();
            summaryBtcTickerBody.empty();

            let rowCss = '';

            for (const i in Object.keys(data.balance)) {
                const item = Object.keys(data.balance)[i];
                rowCss = 'cell-' + item;
                const row =
                    `<tr class='${rowCss}'><td>${item.toUpperCase()}</td><td>Ƀ${data.balance[item].toFixed(8)}</td>` +
                        `<td>Ƀ${data.remainingBtc[item].toFixed(8)}</td></tr>`;
                summaryBalanceBody.append(row);
            }

            for (const i in Object.keys(data.btcTickers)) {
                const item = Object.keys(data.btcTickers)[i];
                let rowCss = 'cell-' + item;

                let btcTicker = data.btcTickers[item];

                const row = `<tr class='${rowCss}'>` +
                    `<td>${btcTicker.exchange}</td><td>${btcTicker.tickerSymbol}${btcTicker.ticker.toFixed(2)}</td>` +
                    `</tr>`;
                summaryBtcTickerBody.append(row);
            }

            if (data.dayChange > 0)
                rowCss = 'cell-green';
            else
                rowCss = 'cell-red';

            summaryTotalBody.append(`<tr class='${rowCss}'><td>Ƀ${data.totalBalance.toFixed(8)}</td></tr>`);
        }

        function fetchPositionPressed() {
            sendMessage('ButtonPressed', 'FetchPositions');
        }

        function savePressed() {
            sendMessage('ButtonPressed', 'Save');
        }
    </script>
}

@section Head
{
    <link rel="import" href="Main/Position">
}

<body>
    <div class="top-div">
        <div class="summary">
            <input type="button" class="position-fetch-button" value="Fetch Positions" onclick="fetchPositionPressed()" />
            <input type="button" class="save-button" value="Save" onclick="savePressed()" />
            <div class="balance">
                <table>
                    <thead>
                        <tr>
                            <th colspan="3">Total Balance / Remaining BTC</th>
                        </tr>
                    </thead>
                    <tbody id="summaryBalanceBody"></tbody>
                    <tfoot id="summaryBalanceFooter"></tfoot>
                </table>
            </div>
            <div class="total">
                <table>
                    <thead>
                        <tr>
                            <th>Portfolio Value</th>
                        </tr>
                    </thead>
                    <tbody id="summaryTotalBody"></tbody>
                </table>
            </div>
            <div class="tickers">
                <table>
                    <thead>
                        <tr>
                            <th colspan="2">BTC Tickers</th>
                        </tr>
                    </thead>
                    <tbody id="summaryBtcTickerBody"></tbody>
                </table>
            </div>
        </div>
        <div class="navigation">
            <ul class="main-nav">
                <li onclick="getPage(this)" data-id="Position">
                    <span class="active">Positions</span>
                </li>
            </ul>
        </div>
    </div>

    <div id="mainContent"></div>

</body>