@{ Layout = ""; }

<template class="selector-template">
    <section id="sectionPosition" class="section is-shown">
        <div id="positionGrid" style="width: 100%; height: 100%;"></div>

        <script>
            var grid;
            var dataView;
            var data = [];
            var columns = [
                {
                    id: "exchange",
                    name: "",
                    minWidth: 15,
                    width: 15
                },
                {
                    id: "coin",
                    name: "Coin",
                    field: "coin",
                    width: 55,
                    cssClass: "cell-title"
                },
                { id: "quantity", name: "Quantity", field: "quantityStr", width: 70 },
                { id: "total", name: "Total", field: "amountStr", width: 142 },
                {
                    id: "price",
                    name: "Buy Price",
                    field: "priceStr",
                    width: 95
                },
                { id: "lastPrice", name: "LastPrice", field: "lastPriceStr", width: 95 },
                { id: "profitLoss", name: "Profit/Loss", field: "profitStr", width: 150 },
                {
                    id: "volume",
                    name: "Volume",
                    field: "volumeStr",
                    width: 75
                },
                {
                    id: "change",
                    name: "24Hr%",
                    field: "changeStr",
                    width: 55
                },
                {
                    id: "notes",
                    name: "Notes",
                    field: "notes",
                    editable: true,
                    width: 160,
                    editor: Slick.Editors.LongText
                }
            ];
            var options = {
                editable: true,
                autoEdit: false,
                explicitInitialization: true,
                autoHeight: true,
                enableCellRangeSelection: true,
                syncColumnCellResize: true,
                selectedCellCssClass: 'cell-selected'
            };

            $(function () {
                dataView = new Slick.Data.DataView();
                grid = new Slick.Grid("#positionGrid", dataView, columns, options);
                grid.setSelectionModel(new Slick.RowSelectionModel());

                dataView.onRowCountChanged.subscribe(function (e, args) {
                    grid.updateRowCount();
                    grid.render();
                });

                dataView.onRowsChanged.subscribe(function (e, args) {
                    grid.invalidateRows(args.rows);
                    grid.render();
                });

                var rowTimer = null;
                grid.onSelectedRowsChanged.subscribe(function (e, args) {
                    if (rowTimer != null) clearTimeout(rowTimer);

                    rowTimer = setTimeout(function () {
                        grid.setSelectedRows([]);
                        rowTimer = null;
                    }, 5000);
                });

                grid.onBeforeEditCell.subscribe(function (e, args) {
                    editInProgress = true;
                });

                grid.onCellChange.subscribe(function (e, args) {
                    let c = args.item.coin;
                    let ex = args.item.exchange;
                    let f = '';
                    let val = "";

                    if (args.cell === grid.getColumnIndex("notes")) {
                        f = "Notes";
                        val = args.item.notes;
                    } else {
                        alert(`Invalid column at onCellChange. ${c} ${args.row} ${args.cell}`);
                        return;
                    }

                    sendMessage('CellEdit', { messageType: 'PositionEdit', coin: c, exchange: ex, field: f, value: val });

                    editInProgress = false;
                });

                grid.onBeforeCellEditorDestroy.subscribe(function (e, args) {
                    editInProgress = false;
                });

                grid.onBeforeAppendCell.subscribe(function (e, args) {
                    let css = 'cell-default ';

                    switch (grid.getColumns()[args.cell].id) {
                        case 'exchange':
                            css = 'cell-' + args.dataContext.exchange.toLowerCase();
                            break;
                        case 'coin':
                            css = "cell-title";
                            break;
                        case 'total':
                            if (args.dataContext.totalPercentage >= 20)
                                css += 'cell-blue4';
                            else if (args.dataContext.totalPercentage >= 10)
                                css += 'cell-blue3';
                            else if (args.dataContext.totalPercentage >= 5)
                                css += 'cell-blue2';
                            else
                                css += 'cell-blue1';
                            break;
                        case 'lastPrice':
                            if (args.dataContext.lastPrice > args.dataContext.price)
                                css += 'cell-foregreen';
                            else
                                css += 'cell-forered';
                            break;
                        case 'profitLoss':
                            if (args.dataContext.profitPercentage >= 20)
                                css += 'cell-green4';
                            else if (args.dataContext.profitPercentage >= 10)
                                css += 'cell-green3';
                            else if (args.dataContext.profitPercentage >= 5)
                                css += 'cell-green2';
                            else if (args.dataContext.profitPercentage >= 0)
                                css += 'cell-green2';
                            else
                                css += 'cell-red';
                            break;
                        case 'volume':
                            if (args.dataContext.isVolumeIncreased)
                                css += 'cell-foregreen';
                            else
                                css += 'cell-forered';
                            break;
                        case 'change':
                            if (args.dataContext.change > 0)
                                css += 'cell-foregreen';
                            else
                                css += 'cell-forered';
                            break;
                    }

                    return css;
                });

                grid.init();
            });

            function refreshPositions(data) {
                if (editInProgress) return;

                grid.invalidate();
                dataView.beginUpdate();
                dataView.setItems(data, 'uniqueName');
                dataView.endUpdate();
            }

        </script>
    </section>
</template>